openapi: 3.0.3
info:
  title: AgentHub Registry API
  description: |
    The universal package registry for AI-native agents, tools, chains, and prompts.

    ## Authentication

    This API uses GitHub OAuth 2.0 for authentication. Most endpoints require a valid JWT token.

    ## Rate Limiting

    API requests are rate limited to 1000 requests per minute per IP address.

    ## Package Types

    The registry supports the following package types:
    - `agent`: AI agents and assistants
    - `tool`: Utilities and functions for agents
    - `chain`: Workflow chains and pipelines
    - `prompt`: Prompt templates and examples
    - `dataset`: Training and reference datasets

    ## Versioning

    All packages follow semantic versioning (semver) conventions.
  version: 1.0.0
  contact:
    name: AgentHub Team
    url: https://github.com/agenthubcli/registry
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://registry.agenthubcli.com
    description: Production server
  - url: http://localhost:8000
    description: Development server

paths:
  # Root and Info Endpoints
  /:
    get:
      summary: Get web UI
      description: Serves the public web interface for browsing packages
      tags: [Web UI]
      responses:
        "200":
          description: HTML web interface
          content:
            text/html:
              schema:
                type: string

  /api:
    get:
      summary: Get API information
      description: Returns basic API information and version
      tags: [Info]
      responses:
        "200":
          description: API information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiInfo"

  /health:
    get:
      summary: Basic health check
      description: Returns basic health status of the service
      tags: [Health]
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"

  /metrics:
    get:
      summary: Prometheus metrics
      description: Returns Prometheus-formatted metrics for monitoring
      tags: [Monitoring]
      responses:
        "200":
          description: Prometheus metrics
          content:
            text/plain:
              schema:
                type: string

  # Authentication Endpoints
  /api/v1/auth/github:
    get:
      summary: Initiate GitHub OAuth
      description: Get GitHub OAuth authorization URL to start login process
      tags: [Authentication]
      parameters:
        - name: redirect_to
          in: query
          description: URL to redirect to after successful authentication
          schema:
            type: string
            format: uri
      responses:
        "200":
          description: OAuth URL generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthUrl"

  /api/v1/auth/github/callback:
    get:
      summary: GitHub OAuth callback
      description: Handle GitHub OAuth callback and issue JWT tokens
      tags: [Authentication]
      parameters:
        - name: code
          in: query
          required: true
          description: Authorization code from GitHub
          schema:
            type: string
        - name: state
          in: query
          description: State parameter to prevent CSRF attacks
          schema:
            type: string
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthSuccess"
        "400":
          description: Invalid authorization code or OAuth error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/auth/refresh:
    post:
      summary: Refresh access token
      description: Get a new access token using a refresh token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshRequest"
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "401":
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/auth/me:
    get:
      summary: Get current user
      description: Get information about the currently authenticated user
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/auth/logout:
    post:
      summary: Logout
      description: Logout the current user (client-side token invalidation)
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Package Management Endpoints
  /api/v1/packages/publish:
    post:
      summary: Publish package
      description: Upload and publish a new package or version
      tags: [Packages]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PackageUpload"
      responses:
        "200":
          description: Package published successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublishSuccess"
        "400":
          description: Invalid package data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: User not authorized to publish
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Package version already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "413":
          description: Package too large
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/packages/{package_name}:
    get:
      summary: Get package details
      description: Get detailed information about a package including all versions
      tags: [Packages]
      parameters:
        - $ref: "#/components/parameters/PackageName"
      responses:
        "200":
          description: Package details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageDetails"
        "404":
          description: Package not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete package
      description: Delete a package and all its versions (admin or owner only)
      tags: [Packages]
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/PackageName"
      responses:
        "200":
          description: Package deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Not authorized to delete package
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Package not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/packages/{package_name}/versions:
    get:
      summary: Get package versions
      description: Get all versions of a package
      tags: [Packages]
      parameters:
        - $ref: "#/components/parameters/PackageName"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
      responses:
        "200":
          description: Package versions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageVersions"
        "404":
          description: Package not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/packages/{package_name}/{version}:
    get:
      summary: Get specific version
      description: Get details about a specific package version
      tags: [Packages]
      parameters:
        - $ref: "#/components/parameters/PackageName"
        - $ref: "#/components/parameters/Version"
      responses:
        "200":
          description: Package version details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageVersionDetails"
        "404":
          description: Package or version not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/packages/{package_name}/{version}/download:
    get:
      summary: Download package
      description: Download a specific package version
      tags: [Packages]
      parameters:
        - $ref: "#/components/parameters/PackageName"
        - $ref: "#/components/parameters/Version"
      responses:
        "200":
          description: Package file
          headers:
            Content-Disposition:
              description: Attachment filename
              schema:
                type: string
            Content-Length:
              description: File size in bytes
              schema:
                type: integer
            X-Package-Name:
              description: Package name
              schema:
                type: string
            X-Package-Version:
              description: Package version
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Package, version, or file not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/packages/{package_name}/stats:
    get:
      summary: Get package statistics
      description: Get download and usage statistics for a package
      tags: [Packages]
      parameters:
        - $ref: "#/components/parameters/PackageName"
      responses:
        "200":
          description: Package statistics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackageStats"
        "404":
          description: Package not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Search Endpoints
  /api/v1/search/:
    get:
      summary: Search packages
      description: Search for packages by name, description, or keywords
      tags: [Search]
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 1
            maxLength: 500
        - $ref: "#/components/parameters/PackageTypeFilter"
        - $ref: "#/components/parameters/SortBy"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResults"
        "422":
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/search/popular:
    get:
      summary: Get popular packages
      description: Get packages sorted by download count
      tags: [Search]
      parameters:
        - $ref: "#/components/parameters/PackageTypeFilter"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
      responses:
        "200":
          description: Popular packages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResults"

  /api/v1/search/recent:
    get:
      summary: Get recent packages
      description: Get recently published packages
      tags: [Search]
      parameters:
        - $ref: "#/components/parameters/PackageTypeFilter"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
      responses:
        "200":
          description: Recent packages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResults"

  /api/v1/search/trending:
    get:
      summary: Get trending packages
      description: Get packages with high recent download activity
      tags: [Search]
      parameters:
        - $ref: "#/components/parameters/PackageTypeFilter"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
      responses:
        "200":
          description: Trending packages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResults"

  # User Endpoints
  /api/v1/users/{username}:
    get:
      summary: Get user profile
      description: Get public profile information for a user
      tags: [Users]
      parameters:
        - name: username
          in: path
          required: true
          description: GitHub username
          schema:
            type: string
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/users/{username}/packages:
    get:
      summary: Get user packages
      description: Get packages owned by a specific user
      tags: [Users]
      parameters:
        - name: username
          in: path
          required: true
          description: GitHub username
          schema:
            type: string
        - $ref: "#/components/parameters/PackageTypeFilter"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
      responses:
        "200":
          description: User packages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPackages"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Health Check Endpoints
  /api/v1/health/:
    get:
      summary: Basic health check
      description: Check if the API is running
      tags: [Health]
      responses:
        "200":
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"

  /api/v1/health/detailed:
    get:
      summary: Detailed health check
      description: Check health of all system components
      tags: [Health]
      responses:
        "200":
          description: Detailed health status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedHealthCheck"
        "503":
          description: Some components are unhealthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedHealthCheck"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained via GitHub OAuth

  parameters:
    PackageName:
      name: package_name
      in: path
      required: true
      description: Package name
      schema:
        type: string
        pattern: '^[a-z0-9]([a-z0-9\-])*[a-z0-9]$'
        minLength: 1
        maxLength: 214
      example: "my-awesome-tool"

    Version:
      name: version
      in: path
      required: true
      description: Package version (semver)
      schema:
        type: string
        pattern: '^[0-9]+\.[0-9]+\.[0-9]+([+-][a-zA-Z0-9\-\.]+)*$'
      example: "1.2.3"

    PackageTypeFilter:
      name: package_type
      in: query
      description: Filter by package type
      schema:
        type: string
        enum: [agent, tool, chain, prompt, dataset]

    SortBy:
      name: sort_by
      in: query
      description: Sort results by field
      schema:
        type: string
        enum: [relevance, downloads, created, updated]
        default: relevance

    Limit:
      name: limit
      in: query
      description: Maximum number of results
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    Offset:
      name: offset
      in: query
      description: Number of results to skip
      schema:
        type: integer
        minimum: 0
        default: 0

  schemas:
    # Basic Types
    PackageType:
      type: string
      enum: [agent, tool, chain, prompt, dataset]
      description: Type of package

    # Common Responses
    Error:
      type: object
      required: [detail]
      properties:
        detail:
          type: string
          description: Error message
        error_code:
          type: string
          description: Machine-readable error code
      example:
        detail: "Package not found"
        error_code: "PACKAGE_NOT_FOUND"

    Message:
      type: object
      required: [message]
      properties:
        message:
          type: string
          description: Success message
      example:
        message: "Operation completed successfully"

    # API Info
    ApiInfo:
      type: object
      required: [service, version, api_version]
      properties:
        service:
          type: string
          example: "AgentHub Registry"
        version:
          type: string
          example: "1.0.0"
        api_version:
          type: string
          example: "v1"
        description:
          type: string
          example: "Universal package registry for AI-native components"

    # Health Check
    HealthCheck:
      type: object
      required: [status, service]
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          example: "healthy"
        service:
          type: string
          example: "agenthub-registry"

    DetailedHealthCheck:
      type: object
      required: [status, service, checks]
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        service:
          type: string
        checks:
          type: object
          properties:
            database:
              $ref: "#/components/schemas/ComponentHealth"
            redis:
              $ref: "#/components/schemas/ComponentHealth"
            storage:
              $ref: "#/components/schemas/ComponentHealth"

    ComponentHealth:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        message:
          type: string
        response_time_ms:
          type: number

    # Authentication
    OAuthUrl:
      type: object
      required: [oauth_url]
      properties:
        oauth_url:
          type: string
          format: uri
          description: GitHub OAuth authorization URL
          example: "https://github.com/login/oauth/authorize?client_id=..."

    AuthSuccess:
      type: object
      required: [access_token, refresh_token, token_type, user]
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: JWT refresh token
        token_type:
          type: string
          example: "bearer"
        expires_in:
          type: integer
          description: Access token expiry in seconds
          example: 3600
        user:
          $ref: "#/components/schemas/UserProfile"

    RefreshRequest:
      type: object
      required: [refresh_token]
      properties:
        refresh_token:
          type: string
          description: JWT refresh token

    TokenResponse:
      type: object
      required: [access_token, token_type]
      properties:
        access_token:
          type: string
          description: New JWT access token
        token_type:
          type: string
          example: "bearer"
        expires_in:
          type: integer
          description: Access token expiry in seconds
          example: 3600

    # User
    UserProfile:
      type: object
      required: [id, github_username]
      properties:
        id:
          type: integer
          example: 123
        github_username:
          type: string
          example: "johndoe"
        display_name:
          type: string
          example: "John Doe"
        github_avatar_url:
          type: string
          format: uri
          example: "https://github.com/avatars/johndoe"
        bio:
          type: string
          example: "AI researcher and developer"
        website:
          type: string
          format: uri
          example: "https://johndoe.dev"
        location:
          type: string
          example: "San Francisco, CA"
        company:
          type: string
          example: "AI Company Inc."
        total_packages:
          type: integer
          example: 5
        total_downloads:
          type: integer
          example: 1234
        created_at:
          type: string
          format: date-time

    # Package Upload
    PackageUpload:
      type: object
      required: [file, package_type]
      properties:
        file:
          type: string
          format: binary
          description: Package file (tar.gz, zip, etc.)
        package_type:
          $ref: "#/components/schemas/PackageType"

    PublishSuccess:
      type: object
      required: [message, package, version]
      properties:
        message:
          type: string
          example: "Package published successfully"
        package:
          $ref: "#/components/schemas/Package"
        version:
          $ref: "#/components/schemas/PackageVersion"

    # Package
    Package:
      type: object
      required: [id, name, package_type, owner, created_at]
      properties:
        id:
          type: integer
          example: 456
        name:
          type: string
          example: "awesome-tool"
        description:
          type: string
          example: "An awesome tool for AI development"
        package_type:
          $ref: "#/components/schemas/PackageType"
        latest_version:
          type: string
          example: "1.2.3"
        total_downloads:
          type: integer
          example: 5678
        download_count_last_30_days:
          type: integer
          example: 234
        version_count:
          type: integer
          example: 8
        homepage:
          type: string
          format: uri
          example: "https://github.com/user/awesome-tool"
        repository:
          type: string
          format: uri
          example: "https://github.com/user/awesome-tool"
        documentation:
          type: string
          format: uri
          example: "https://awesome-tool.readthedocs.io"
        keywords:
          type: array
          items:
            type: string
          example: ["ai", "tool", "automation"]
        owner:
          $ref: "#/components/schemas/UserProfile"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PackageVersion:
      type: object
      required: [id, version, download_count, file_size, created_at]
      properties:
        id:
          type: integer
          example: 789
        version:
          type: string
          example: "1.2.3"
        description:
          type: string
          example: "Added new features and bug fixes"
        download_count:
          type: integer
          example: 123
        file_size:
          type: integer
          description: File size in bytes
          example: 2048576
        file_hash_sha256:
          type: string
          example: "abc123..."
        is_prerelease:
          type: boolean
          example: false
        runtime:
          type: string
          example: "python"
        python_version:
          type: string
          example: ">=3.8"
        download_url:
          type: string
          format: uri
          description: Download URL for this version
        manifest:
          type: object
          description: Package manifest data
        published_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    PackageDetails:
      type: object
      required: [package, owner, versions, latest_version]
      properties:
        package:
          $ref: "#/components/schemas/Package"
        owner:
          $ref: "#/components/schemas/UserProfile"
        versions:
          type: array
          items:
            $ref: "#/components/schemas/PackageVersion"
        latest_version:
          $ref: "#/components/schemas/PackageVersion"

    PackageVersions:
      type: object
      required: [package_name, versions, total]
      properties:
        package_name:
          type: string
          example: "awesome-tool"
        versions:
          type: array
          items:
            $ref: "#/components/schemas/PackageVersion"
        total:
          type: integer
          example: 8
        limit:
          type: integer
          example: 20
        offset:
          type: integer
          example: 0

    PackageVersionDetails:
      type: object
      required: [package, version, owner]
      properties:
        package:
          $ref: "#/components/schemas/Package"
        version:
          $ref: "#/components/schemas/PackageVersion"
        owner:
          $ref: "#/components/schemas/UserProfile"

    PackageStats:
      type: object
      required: [package_name, total_downloads, version_count]
      properties:
        package_name:
          type: string
          example: "awesome-tool"
        total_downloads:
          type: integer
          example: 5678
        downloads_last_30_days:
          type: integer
          example: 234
        downloads_last_7_days:
          type: integer
          example: 56
        version_count:
          type: integer
          example: 8
        latest_version:
          type: string
          example: "1.2.3"

    # Search
    SearchResults:
      type: object
      required: [results, total, limit, offset, query]
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Package"
        total:
          type: integer
          description: Total number of matching packages
          example: 156
        limit:
          type: integer
          example: 20
        offset:
          type: integer
          example: 0
        query:
          type: string
          example: "machine learning"
        package_type:
          $ref: "#/components/schemas/PackageType"
        sort_by:
          type: string
          example: "relevance"

    UserPackages:
      type: object
      required: [username, packages, total_packages]
      properties:
        username:
          type: string
          example: "johndoe"
        packages:
          type: array
          items:
            $ref: "#/components/schemas/Package"
        total_packages:
          type: integer
          example: 5
        limit:
          type: integer
          example: 20
        offset:
          type: integer
          example: 0

tags:
  - name: Authentication
    description: GitHub OAuth and JWT token management
  - name: Packages
    description: Package publishing, management, and downloads
  - name: Search
    description: Package discovery and search functionality
  - name: Users
    description: User profiles and package ownership
  - name: Health
    description: Service health and monitoring
  - name: Info
    description: API information and metadata
  - name: Web UI
    description: Public web interface
  - name: Monitoring
    description: Metrics and observability
